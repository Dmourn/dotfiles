#!/usr/bin/env python3

"""
A program to cycle through wallpapers using swaybg
"""

import os
import subprocess
import shutil
import sys
import time
from glob import glob
from pathlib import Path
from random import shuffle
from typing import List


def get_wallpapers() -> List[str]:
    """Get list of wallpapers"""
    home_dir = os.environ.get("HOME")
    wallpaper_dir = os.environ.get("WALLPAPER_DIR")
    if home_dir is None:
        home_dir = "/home/" + os.getlogin()
    if wallpaper_dir is None:
        wallpaper_dir = home_dir + "/.local/share/wallpapers"
    # ran into weird formatting with slashes
    wallpaper_dir = Path(wallpaper_dir)
    file_exts = ["png", "jpeg", "jpg", "webp"]
    wallpaper_list = []
    for ext in file_exts:
        wallpaper_list += glob(wallpaper_dir.as_posix() + f"/*.{ext}")
    return wallpaper_list


def start_swaybg(wallpaper: str, mode: str) -> subprocess.Popen:
    """Spawn a swaybg process"""
    sway_binary = shutil.which("swaybg")
    if sway_binary is None:
        print("sway was not found in PATH. Exiting...", file=sys.stderr)
        sys.exit(1)
    return subprocess.Popen(
        [sway_binary, "-i", f"{wallpaper}", "-m", f"{mode}"],
        stderr=subprocess.PIPE,
        stdout=subprocess.PIPE,
    )


def main(t: int, mode: str):
    """
    Run swaybg for t seconds
    There is a small lag when swaybg starts back up.
    My solution is to call the next swaybg proc before killing
    the last one.
    """

    time_offset = 5
    if t < time_offset:
        print(f"time must be more than {time_offset} seconds", file=sys.stderr)
        sys.exit()

    time_padded = t - time_offset
    wallpaper_list: List[str] = []
    proc_list = []

    while True:
        if len(wallpaper_list) <= 1:
            wallpaper_list = get_wallpapers()
            shuffle(wallpaper_list)

        if len(proc_list) != 0:
            time.sleep(time_padded)
            proc_list.append(start_swaybg(wallpaper_list.pop(), mode))
            time.sleep(time_offset)
            p = proc_list.pop(0)
            p.terminate()
        else:
            proc_list.append(start_swaybg(wallpaper_list.pop(), mode))


if __name__ == "__main__":
    import argparse

    parser = argparse.ArgumentParser(
        description="Change backgrounds periodically using swaybg. Currently only works for one display (since that all I have)"
    )
    parser.add_argument(
        "-t",
        "--timeout",
        help="Time in seconds before wallpaper changes",
        type=float,
        default=600,
    )
    parser.add_argument(
        "-m",
        "--mode",
        help="Mode for wallpaper [stretch, fill, fit, center, tile]",
        type=str,
        default="fill",
    )
    args = parser.parse_args()
    main(args.timeout, args.mode)
